// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  subjects Subject[]
  chapters Chapter[]
  tests Test[]
  chat Chat[]
}

model Subject{
  id Int @id @default(autoincrement())
  name String
  reader User @relation(fields: [reader_id],references: [id])
  reader_id Int
  chapter Chapter[]
  tests Test[]
  chat Chat[]
}

model Chapter{
  id Int @id @default(autoincrement())
  name String
  user User @relation(fields: [user_Id], references: [id])
  user_Id Int
  subjectrelated Subject @relation(fields: [subjectid],references: [id])
  subjectid Int
  chat Chat[]
}

model Chat{
  id Int @id @unique @default(autoincrement())
  chat String[]
  user User @relation(fields: [userId], references: [id])
  userId Int
  subjectfrom Subject @relation(fields: [subject_id],references: [id])
  subject_id Int
  chapterfrom Chapter @relation(fields: [chapter_id],references: [id])
  chapter_id Int
}

model Test{
  id Int @id @unique @default(autoincrement())
  testname String
  qattempted Int?
  qcorrect Int?
  qwrong Int?
  totalq Int?
  user User @relation(fields: [userId], references: [id])
  userId Int
  Testfrom Subject @relation(fields: [subject_id],references: [id])
  subject_id Int
}

model Question {
  id          Int    @unique  @id @default(autoincrement())
  question    String
  explanation String
  options     Option[]
  subjectname String
  correctOption Int
}

 model Option {
  id        Int    @unique  @id @default(autoincrement())
  text      String
  question  Question @relation(fields: [questionId], references: [id])
  questionId Int
}